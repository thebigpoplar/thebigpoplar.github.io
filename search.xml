<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>修复项目中的 block 和 major</title>
      <link href="/2023/07/06/eslint-block/"/>
      <url>/2023/07/06/eslint-block/</url>
      
        <content type="html"><![CDATA[<h3 id="no-multi-assign"><a href="#no-multi-assign" class="headerlink" title="no-multi-assign"></a>no-multi-assign</h3><blockquote><p>禁止使用链式赋值表达式，链接变量的赋值可能会导致意外结果并且难以阅读，此规则不允许在单个语句中使用多个赋值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// incorrect code</span></span><br><span class="line"><span class="keyword">var</span> a = b = c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = bar = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a =</span><br><span class="line">    b =</span><br><span class="line">    c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    a = b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = b = <span class="string">&quot;quux&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct code</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = c;</span><br><span class="line"><span class="keyword">let</span> b = c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;quux&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;quux&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="no-this-before-super"><a href="#no-this-before-super" class="headerlink" title="no-this-before-super"></a>no-this-before-super</h3><blockquote><p>在构造函数中调用之前禁止this&#x2F;supersuper()，在派生类的构造函数中，如果在调用之前使用this&#x2F; ，则会引发引用错误。supersuper()，此规则检查构造函数中的this&#x2F;super关键字，然后报告 之前的关键字super()。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// incorrect code</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">B</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">B</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">foo</span>();</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">B</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">B</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="variable language_">this</span>.<span class="title function_">foo</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct code</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">0</span>; <span class="comment">// OK, this class doesn&#x27;t have an `extends` clause.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">B</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">0</span>; <span class="comment">// OK, this is after `super()`.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">B</span> &#123;</span><br><span class="line">    <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">0</span>; <span class="comment">// OK. this is not in a constructor.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="no-param-reassign"><a href="#no-param-reassign" class="headerlink" title="no-param-reassign"></a>no-param-reassign</h3><blockquote><p>禁止重新分配function参数<br>对声明为函数参数的变量进行赋值可能会产生误导并导致令人困惑的行为，因为修改函数参数也会改变对象arguments。通常，对函数参数的赋值是无意的，并且表明存在错误或程序员错误。<br>该规则也可以配置为在修改函数参数时失败。对参数的副作用可能会导致违反直觉的执行流程，并使错误难以追踪。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// incorrect code</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">bar</span>) &#123;</span><br><span class="line">    bar = <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">bar</span>) &#123;</span><br><span class="line">    bar++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">bar</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (bar <span class="keyword">in</span> baz) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">bar</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (bar <span class="keyword">of</span> baz) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct code</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">bar</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> baz = bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="default-param-last"><a href="#default-param-last" class="headerlink" title="default-param-last"></a>default-param-last</h3><blockquote><p>默认参数位于最后。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// incorrect code</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a = <span class="number">0</span>, b: number</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: number, b = <span class="number">0</span>, c: number</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: number, b?: number, c: number</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public a = <span class="number">10</span>, private b: number</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public a?: number, private b: number</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct code</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a = <span class="number">0</span></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: number, b = <span class="number">0</span></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: number, b?: number</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: number, b?: number, c = <span class="number">0</span></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: number, b = <span class="number">0</span>, c?: number</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public a, private b = <span class="number">0</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public a, private b?: number</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="eqeqeq"><a href="#eqeqeq" class="headerlink" title="eqeqeq"></a>eqeqeq</h3><blockquote><p>使用类型安全的相等运算符 &#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D; 而不是其常规对应运算符 &#x3D;&#x3D;和被认为是良好的做法!&#x3D;。<br>● [] &#x3D;&#x3D; false<br>● [] &#x3D;&#x3D; ![]<br>● 3 &#x3D;&#x3D; “03”<br>如果其中之一出现在看似无辜的声明中，那么a &#x3D;&#x3D; b实际问题就很难发现。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// incorrect code</span></span><br><span class="line">a == b</span><br><span class="line">foo == <span class="literal">true</span></span><br><span class="line">bananas != <span class="number">1</span></span><br><span class="line">value == <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">typeof</span> foo == <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span> != <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="number">0</span> == <span class="number">0</span></span><br><span class="line"><span class="literal">true</span> == <span class="literal">true</span></span><br><span class="line">foo == <span class="literal">null</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct code</span></span><br><span class="line">a === b</span><br><span class="line">foo === <span class="literal">true</span></span><br><span class="line">bananas !== <span class="number">1</span></span><br><span class="line">value === <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">typeof</span> foo === <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span> !== <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="number">0</span> === <span class="number">0</span></span><br><span class="line"><span class="literal">true</span> === <span class="literal">true</span></span><br><span class="line">foo === <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="no-use-before-define"><a href="#no-use-before-define" class="headerlink" title="no-use-before-define"></a>no-use-before-define</h3><blockquote><p>在定义变量之前禁止使用变量。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// incorrect code</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="title class_">Foo</span>.<span class="property">FOO</span>;</span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="variable constant_">FOO</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct code</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Foo</span>.<span class="property">FOO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="variable constant_">FOO</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何写出优雅的代码"><a href="#如何写出优雅的代码" class="headerlink" title="如何写出优雅的代码"></a>如何写出优雅的代码</h2><h3 id="渐进式重构"><a href="#渐进式重构" class="headerlink" title="渐进式重构"></a>渐进式重构</h3><p> 渐进式重构是不断地对既有代码进行抽象、分离和组合。做代码重构之前需要回答两个问题：<br>  1、什么样的代码需要重构？<br>  2、何时进行重构？</p><p> 设计不是一蹴而就的，有时候写着写着才发现某些代码可以抽离出来单独使用，需要重构的代码需要满足几个条件：<br> 1、代码后期可复用<br> 2、代码无副作用<br>3、代码逻辑单一</p><p>过早重构可能会因需求变化太快白白浪费许多时间；过晚重构会因为代码逻辑复杂、相似代码积压过多导致变更风险太高，难以维护。渐进式重构如下图所示（红色部分为增加的代码）：<br><img src="https://gzw.sinaimg.cn/orj360/0065BA7Bgy1hfnk9xyt5ej314o09mn5x.jpg"></p><p>首先我们在同一个源文件中新增功能，发现部分代码无副作用且可分离，因此在同一个文件中进行代码分割，形成许多功能单一的模块。如此往复后发现单文件的体积越来越大，此时就可以将功能相关联的模块抽出来放到单独的文件中统一管理，如 helpers、components、constants 等等。</p><h3 id="高内聚低耦合"><a href="#高内聚低耦合" class="headerlink" title="高内聚低耦合"></a>高内聚低耦合</h3><p>高内聚低耦合一直是软件设计领域里亘古不变的话题，重构的目标是提高代码的内聚性，降低各功能间的耦合程度，降低后期维护成本，特别是写业务代码，这一点相当重要。<br>举个栗子，比如新需求希望在现有的产品页面上增加发红包功能，以吸引用户开通某个功能，按照正常逻辑，我需要：<br>1、在当前页面中引入相关依赖<br>2、初始化，查询红包相关信息<br>3、用户点击时，触发红包发送</p><p>白色部分表示上个版本的代码，红色部分表示完成这个需求需要变更的代码：<br><img src="https://gzw.sinaimg.cn/mw690/0065BA7Bgy1hfnka2bsmjj30bg05mabb.jpg"></p><p>这样一来，这个发红包功能就和以前的代码严重耦合，如果这是个只需要上线一周的临时需求，下线代码的时候就是一个高风险的动作；如果上线运行期间还需要对产品页面进行迭代，越往后就越搞不清楚谁是谁了。合理的设计应该是下面这个样子的：</p><p>将和产品代码无关的功能性代码拆分出来，放到另一个文件中内部维护好整个生命周期状态，对外只暴露少量的接口或是方法，这样一来对产品页面的改造只需要：<br>1、引入红包组件<br>2、用户点击时，调用红包组件的发奖方法</p><p>这样的变更是极小的、明确的、可控的。换句话说，整个红包功能是高内聚的，与产品代码是低耦合的。这样实践也带来另一个好处：我得到了一个可复用的红包组件！</p><h3 id="合理冗余"><a href="#合理冗余" class="headerlink" title="合理冗余"></a>合理冗余</h3><p>业务需求是多变的，写出来的代码也是如此，频繁地抽象很可能导致过度设计，一个抽象很可能随着迭代次数的增多变得十分复杂。在存在多个变量的分支业务场景，比如同时包含活动是否过期、是否已参加活动、是否完成一次任务这样的情况，会存在多个嵌套 if-else 结构，这时将代码冗余设计是个不错的选择。下面举一个例子来说明什么是合理冗余：<br>e.g. 有这样一个需求，一开始很简单，需要设计两个运营展位：<br><img src="https://gzw.sinaimg.cn/mw690/0065BA7Bgy1hfnka6y4tyj30ls06c0vk.jpg"></p><p>那么抽象一个组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Item = (&#123; title, content &#125;) =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h4&gt;&#123;title&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;p&gt;&#123;content&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在需求要求在第一个展位的标题上增加热文标记：<br><img src="https://gzw.sinaimg.cn/mw690/0065BA7Bgy1hfnkbd3sbpj306l02ajr9.jpg"></p><p>也很容易：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Item = (&#123; title, content &#125;, index) =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h4&gt;&#123;title&#125;&#123;index === 0 &amp;&amp; &lt;span&gt;hot&lt;/span&gt;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;p&gt;&#123;content&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需求又变了，要求：在第一个展位去掉内容，并且在下方加个按钮；第二个展位的标题右边增加一个超链接以及增加一个副标题：<br><img src="https://gzw.sinaimg.cn/mw690/0065BA7Bgy1hfnklmr55jj306l02a0so.jpg"></p><p>这下有点恶心了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const Item = (&#123; title, content &#125;, index) =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h4&gt;</span><br><span class="line">      &#123;title&#125;</span><br><span class="line">      &#123;index === 0 &amp;&amp; &lt;span&gt;hot&lt;/span&gt;&#125;</span><br><span class="line">      &#123;index === 1 &amp;&amp; &lt;a href=&quot;xxx&quot;&gt;去看看&lt;/a&gt;&#125;</span><br><span class="line">    &lt;/h4&gt;</span><br><span class="line">    &#123;index === 1 &amp;&amp; &lt;h5&gt;副标题&lt;/h5&gt;&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &#123;index !== 0 &amp;&amp; content&#125;</span><br><span class="line">      &#123;index === 0 &amp;&amp; &lt;button&gt;领福利&lt;button&gt;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，之前抽象的好好的，现在需求一变，代码就面目全非了，中间混杂着两个状态（第一个、第二个）的判断逻辑。实际情况很可能比这个更复杂，在多状态交织逻辑难以通过一套代码表达清楚时，进行合理冗余就是个不错的选择，将上面的例子用两个 if 重写如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 第一个展位</span><br><span class="line">if (index === 0) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h4&gt;标题一&lt;span&gt;hot&lt;/span&gt;&lt;/h4&gt;</span><br><span class="line">      &lt;p&gt;&lt;button&gt;领福利&lt;button&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 第二个展位</span><br><span class="line">if (index === 1) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h4&gt;标题二&lt;a href=&quot;xxx&quot;&gt;去看看&lt;/a&gt;&lt;/h4&gt;</span><br><span class="line">      &lt;h5&gt;副标题&lt;/h5&gt;</span><br><span class="line">      &lt;p&gt;内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>合理冗余其实也是一种重构，根据业务逻辑和代码规模，做相似抽象还是代码冗余，这其实也是渐进式重构的一种体现。无论采用何种方式，只要能把业务逻辑表达清楚，让代码始终保持良好的可读性和可维护性，就OK。</p><p>下面介绍一个过度抽象的例子。</p><h3 id="拒绝过度抽象"><a href="#拒绝过度抽象" class="headerlink" title="拒绝过度抽象"></a>拒绝过度抽象</h3><p>在 JavaScript 代码中进行深度抽象有时并非好事，有 OOP（面向对象编程）背景的同学很容易先入为主设计：所有数据结构都想封装成一个类 （Class） 。实际上 Class 在 JavaScript 中是个不好的设计，它并非真正的类。几年前，我曾看到一位 Java 转前端的同学写出了类似这样的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class DataItem &#123;</span><br><span class="line">  constructor(id, name, value) &#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DataCollection &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.items = new Array();</span><br><span class="line">  &#125;</span><br><span class="line">  insert(item) &#123;</span><br><span class="line">    this.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const item1 = new DataItem(1, &#x27;name1&#x27;, 100);</span><br><span class="line">const item2 = new DataItem(2, &#x27;name2&#x27;, 200);</span><br><span class="line">const list = new DataCollection();</span><br><span class="line">list.insert(item1);</span><br><span class="line">list.insert(item2);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一股浓浓的 Java 味道扑面而来。上面的代码并没有发挥出 JavaScript 的语言优势，也增加了不少理解成本，如果用面向对象编程的思路去写前端代码，特别是业务代码，可真是一场噩梦。正确的写法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const list = [&#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  name: &#x27;name1&#x27;,</span><br><span class="line">  value: 100</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  id: 2,</span><br><span class="line">  name: &#x27;name2&#x27;,</span><br><span class="line">  value: 200</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>由于 JS 属于弱类型语言，弱类型语言就要发挥弱类型的优势，无需过多类型定义和 Class 抽象，用最原始的 object 和 function 足以胜任从简单到复杂的业务场景。这里特别想提及前端所熟知的 Redux 状态管理器，Redux 中，state 就是普通的 object，reducer 就是普通的 function，action 也是普通的 object，不加任何类型约束。因为简单，所以强大。</p><h3 id="眼观六路"><a href="#眼观六路" class="headerlink" title="眼观六路"></a>眼观六路</h3><p>用弱类型语言编程意味着无需编译，无需编译的语言天生存在一个问题是在运行前缺少必要的类型检查，将问题暴露在运行时往往会导致非常严重的故障。这就要求开发者能在写代码的阶段严格保证代码质量，特别是写业务代码。<br>集成开发环境（IDE）对 JavaScript 代码的智能提示能力有限，很多时候不能通过 IDE 查找某个变量或者函数的所有引用，这时就要善用 Ctrl + F 进行全局查找来保证自己的单点变更不会影响到其他地方。如果使用 TypeScript，在类型检查、引用查找上的帮助会更好。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天给大家分享了关于书写业务代码的一些实践经验：对代码进行渐进式重构是提升代码健壮性的有力武器；设计高内聚低耦合的代码可以让你在做需求的过程中沉淀出一套通用解决方案；合理冗余可以简化复杂的场景，让开发变得高效、测试变得容易；拒绝过度抽象，拥抱简单，灵活变化。保持 眼观六路 的好习惯能让代码质量提升一个台阶。<br>最后，希望大家能在实际开发过程中去体会和学习，不断思考和总结，将业务代码写优雅，是个很大的挑战。</p><blockquote><p>作者：蚂蚁保险体验技术<br>链接：<a href="https://juejin.cn/post/6844903833546702856">https://juejin.cn/post/6844903833546702856</a><br>来源：掘金</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Eslint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将前端静态资源部署到阿里云OSS上</title>
      <link href="/2023/07/05/aliyun/"/>
      <url>/2023/07/05/aliyun/</url>
      
        <content type="html"><![CDATA[<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><h3 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h3><h2 id="OSS"><a href="#OSS" class="headerlink" title="OSS"></a>OSS</h2><h3 id="创建-OSS-Bucket"><a href="#创建-OSS-Bucket" class="headerlink" title="创建 OSS Bucket"></a>创建 OSS Bucket</h3><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>先占位后续有时间补～</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSS </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Fabric.js</title>
      <link href="/2023/03/15/fabric-01/"/>
      <url>/2023/03/15/fabric-01/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是Fabric-js"><a href="#什么是Fabric-js" class="headerlink" title="什么是Fabric.js ?"></a>什么是Fabric.js ?</h3><p>Fabric.js 是一个可以简化 canvas 程序编写的库，在原生 canvas 之上提供了交互式对象模型，为 canvas 提供所缺少的对象模型, svg 解析器, 交互和一整套其他不可或缺的工具，通过简洁的 api 就可以在画布上进行丰富的操作。</p><h3 id="为什么要使用Fabric-js-？"><a href="#为什么要使用Fabric-js-？" class="headerlink" title="为什么要使用Fabric.js ？"></a>为什么要使用Fabric.js ？</h3><p>canvas 提供一个好的画布能力, 但是 api 不够友好。绘制简单图形其实还可以, 不过做一些复杂的图形绘制, 编写一些复杂的效果，就不是那么方便了。Fabric.js 就是为此而开发，它主要就是用对象的方式去编写代码。</p><h3 id="Fabric-js-能做的事情"><a href="#Fabric-js-能做的事情" class="headerlink" title="Fabric.js 能做的事情"></a>Fabric.js 能做的事情</h3><ul><li>在canvas 上创建、填充图形（包括图片、文字、规则图形和复杂路径组成图形）。</li><li>给图形填充渐变颜色。</li><li>组合图形（包括组合图形、图形文字、图片等）。</li><li>设置图形动画及用户交互。</li><li>生成JSON, SVG 数据等。</li><li>生成Canvas 对象自带拖拉拽功能。</li></ul><iframe src='http://fabricjs.com/'></iframe><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h5 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​npm install fabric --save</span><br></pre></td></tr></table></figure><h5 id="通过cdn引用"><a href="#通过cdn引用" class="headerlink" title="通过cdn引用"></a>通过cdn引用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/fabric@5.3.0/dist/fabric.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/3.6.6/fabric.js"></script><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h5 id="绘制一个简单的图形"><a href="#绘制一个简单的图形" class="headerlink" title="绘制一个简单的图形"></a>绘制一个简单的图形</h5><p>Fabric 提供了 7 种基础形状：</p><ol><li>fabric.Circle (圆)</li><li>fabric.Ellipse (椭圆)</li><li>fabric.Line (线)</li><li>fabric.Polyline (多条线绘制成图形)</li><li>fabric.triangle (三角形)</li><li>fabric.Rect (矩形)</li><li>fabric.Polygon (多边形)</li></ol><h5 id="圆和矩形"><a href="#圆和矩形" class="headerlink" title="圆和矩形:"></a>圆和矩形:</h5>       <style>      #canvas {        border: 1px solid #000;        margin: 10px;        width: 300px;        height: 300px;      }    </style>  <script src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js"></script>      <canvas id="canvas" width="300" height="300"></canvas>    <script>      const c = new fabric.Canvas('canvas');           const rect = new fabric.Rect({            left: 100, //距离左边的距离            top: 100, //距离上边的距离            fill: "green", //填充的颜色            width: 200, //矩形宽度            height: 100, //矩形高度        });        const circle = new fabric.Circle({    left: 0, //距离左边的距离    top: 0, //距离上边的距离    fill: "red", //填充的颜色    radius: 50, //圆的半径});c.add(rect);c.add(circle);    </script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">new</span> fabric.<span class="title class_">Canvas</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">const</span> rect = <span class="keyword">new</span> fabric.<span class="title class_">Rect</span>(&#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">100</span>, <span class="comment">//距离左边的距离</span></span><br><span class="line">        <span class="attr">top</span>: <span class="number">100</span>, <span class="comment">//距离上边的距离</span></span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&quot;green&quot;</span>, <span class="comment">//填充的颜色</span></span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span>, <span class="comment">//矩形宽度</span></span><br><span class="line">        <span class="attr">height</span>: <span class="number">100</span>, <span class="comment">//矩形高度</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> circle = <span class="keyword">new</span> fabric.<span class="title class_">Circle</span>(&#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">0</span>, <span class="comment">//距离左边的距离</span></span><br><span class="line">        <span class="attr">top</span>: <span class="number">0</span>, <span class="comment">//距离上边的距离</span></span><br><span class="line">        <span class="attr">fill</span>: <span class="string">&quot;red&quot;</span>, <span class="comment">//填充的颜色</span></span><br><span class="line">        <span class="attr">radius</span>: <span class="number">50</span>, <span class="comment">//圆的半径</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    c.<span class="title function_">add</span>(rect);</span><br><span class="line">    c.<span class="title function_">add</span>(circle);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以通过以下属性设置,决定是否可以对相关元素进行交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.selection = false; // 禁止所有选中</span><br><span class="line">rect.set(&quot;selectable&quot;, false); // 只是禁止这个矩形选中</span><br></pre></td></tr></table></figure><h5 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h5><p>主要有通过url 和 img 标签绘制两种方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过url绘制图片</span></span><br><span class="line"><span class="keyword">const</span> urlImage = <span class="keyword">new</span> fabric.<span class="property">Image</span>.<span class="title function_">fromURL</span>(</span><br><span class="line">    <span class="comment">//本地图片需要通过require来引入,require(&quot;./xxx.jpeg&quot;)</span></span><br><span class="line">    <span class="string">&quot;https://images.unsplash.com/photo-1682695795798-1b31ea040caf?ixlib=rb-4.0.3&amp;= ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=2070&amp;q=80&quot;</span>,</span><br><span class="line">    <span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">        img.<span class="title function_">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">        canvas.<span class="title function_">add</span>(img);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">​</span><br><span class="line"><span class="comment">//也可以通过标签绘制</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> fabric.<span class="title class_">Image</span>(img, &#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0.8</span>,</span><br><span class="line">&#125;);</span><br><span class="line">canvas.<span class="title function_">add</span>(image, urlImage);</span><br></pre></td></tr></table></figure><h5 id="通过自定义的路径绘制"><a href="#通过自定义的路径绘制" class="headerlink" title="通过自定义的路径绘制"></a>通过自定义的路径绘制</h5><p>在此之前我们需要了解几个参数的含义:</p><ol><li>M : “move”移动到某点</li><li>L : “line”画线 x,y</li><li>C : “curve”曲线</li><li>A : “arc”弧</li><li>Z : 闭合路径(类似 PS 中的创建选区)</li></ol>       <style>      #canvas {        border: 1px solid #000;        margin: 10px;        width: 300px;        height: 300px;      }    </style>  <script src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js"></script>      <canvas id="custom-path-canvas" width="300" height="300"></canvas>    <script>      const customPathCanvas = new fabric.Canvas('custom-path-canvas');         const customPath = new fabric.Path("M 0 0 L 300 100 L 170 100  z");customPath.set({    left: 100,    top: 100,    fill: "green",});customPathCanvas.add(customPath);    </script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> customPath = <span class="keyword">new</span> fabric.<span class="title class_">Path</span>(<span class="string">&quot;M 0 0 L 300 100 L 170 100  z&quot;</span>);</span><br><span class="line"> customPath.<span class="title function_">set</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">canvas.<span class="title function_">add</span>(customPath);</span><br></pre></td></tr></table></figure><blockquote><p>可以看到通过路径绘制,我们可以制作非常复杂的图形(但是一般用不到,我们一般用它来解析 SVG 后拿到 path 复原图形)</p></blockquote><h5 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h5><blockquote><p>第一个参数是动画的属性，第二个参数是动画的最终位置，第三个参数是一个可选的对象，指定动画的细节：持续时间，回调，动效等。</p></blockquote><p>参数：</p><ol><li><p>duration 默认为 500ms。可以用来改变动画的持续时间。</p></li><li><p>from 允许指定动画属性的起始值（如果我们不希望使用当前值）。</p></li><li><p>onComplete 动画结束之后的回调。</p></li><li><p>easing动效函数。</p></li></ol><p>官网demo：</p><iframe src='http://fabricjs.com/ladybug'></iframe><h6 id="绝对动画"><a href="#绝对动画" class="headerlink" title="绝对动画"></a>绝对动画</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rect = <span class="keyword">new</span> fabric.<span class="title class_">Rect</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">400</span>, <span class="comment">//距离左边的距离</span></span><br><span class="line">    <span class="attr">top</span>: <span class="number">200</span>, <span class="comment">//距离上边的距离</span></span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&quot;green&quot;</span>, <span class="comment">//填充的颜色</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">200</span>, <span class="comment">//宽度</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">100</span>, <span class="comment">//高度</span></span><br><span class="line">&#125;);</span><br><span class="line">rect.<span class="title function_">animate</span>(<span class="string">&quot;left&quot;</span>, <span class="number">100</span>, &#123;</span><br><span class="line">    <span class="attr">onChange</span>: canvas.<span class="property">renderAll</span>.<span class="title function_">bind</span>(canvas),</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line">canvas.<span class="title function_">add</span>(rect);</span><br></pre></td></tr></table></figure><h6 id="相对动画-第二个参数通过-x3D-x3D-等来决定动画的最终效果"><a href="#相对动画-第二个参数通过-x3D-x3D-等来决定动画的最终效果" class="headerlink" title="相对动画(第二个参数通过+&#x3D;,-&#x3D;等来决定动画的最终效果)"></a>相对动画(第二个参数通过+&#x3D;,-&#x3D;等来决定动画的最终效果)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rect = <span class="keyword">new</span> fabric.<span class="title class_">Rect</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">400</span>, <span class="comment">//距离左边的距离</span></span><br><span class="line">    <span class="attr">top</span>: <span class="number">200</span>, <span class="comment">//距离上边的距离</span></span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&quot;green&quot;</span>, <span class="comment">//填充的颜色</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">200</span>, <span class="comment">//宽度</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">100</span>, <span class="comment">//高度</span></span><br><span class="line">&#125;);</span><br><span class="line">rect.<span class="title function_">animate</span>(<span class="string">&quot;left&quot;</span>, <span class="number">100</span>, &#123;</span><br><span class="line">    <span class="attr">onChange</span>: canvas.<span class="property">renderAll</span>.<span class="title function_">bind</span>(canvas),</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;);</span><br><span class="line">canvas.<span class="title function_">add</span>(rect);</span><br></pre></td></tr></table></figure><h6 id="定义动画的动效函数"><a href="#定义动画的动效函数" class="headerlink" title="定义动画的动效函数"></a>定义动画的动效函数</h6><blockquote><p>默认情况下，动画使用“easeInSine”动效执行。如果这不是你需要的，fabric 为我们提供了很多内置动画效果, fabric.util.ease 下有一大堆动效的选项。<br>常用的有easeOutBounce,easeInCubic,easeOutCubic,easeInElastic,easeOutElastic,easeInBounce 和easeOutExpo 等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rect.<span class="title function_">animate</span>(<span class="string">&quot;left&quot;</span>, <span class="number">100</span>, &#123;</span><br><span class="line">    <span class="attr">onChange</span>: canvas.<span class="property">renderAll</span>.<span class="title function_">bind</span>(canvas),</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">easing</span>: fabric.<span class="property">util</span>.<span class="property">ease</span>.<span class="property">easeOutBounce</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="图像滤镜"><a href="#图像滤镜" class="headerlink" title="图像滤镜"></a>图像滤镜</h5><p>目前Fabric 为我们提供了以下内置滤镜：</p><ol><li>Blur 模糊</li><li>Brightness 亮度</li><li>ColorMatrix 颜色矩阵</li><li>Contrast 对比</li><li>Convolute 卷积</li><li>Gamma 伽玛</li><li>Grayscale 灰度</li><li>HueRotation 色调旋转</li><li>Invert 倒置</li><li>Noise 噪音</li><li>Pixelate 像素化</li><li>RemoveColor 移除颜色</li><li>Resize 调整大小</li><li>Saturation 饱和</li></ol><h6 id="单个滤镜"><a href="#单个滤镜" class="headerlink" title="单个滤镜"></a>单个滤镜</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fabric.<span class="property">Image</span>.<span class="title function_">fromURL</span>(<span class="built_in">require</span>(<span class="string">&quot;https://images.unsplash.com/photo-1682695795798-1b31ea040caf?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=2070&amp;q=80&quot;</span>), <span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    img.<span class="title function_">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">    canvas.<span class="title function_">add</span>(img);</span><br><span class="line">&#125;);</span><br><span class="line">fabric.<span class="property">Image</span>.<span class="title function_">fromURL</span>(<span class="built_in">require</span>(<span class="string">&quot;https://images.unsplash.com/photo-1682695795798-1b31ea040caf?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=2070&amp;q=80&quot;</span>), <span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    img.<span class="title function_">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">// 添加滤镜</span></span><br><span class="line">    img.<span class="property">filters</span>.<span class="title function_">push</span>(<span class="keyword">new</span> fabric.<span class="property">Image</span>.<span class="property">filters</span>.<span class="title class_">Grayscale</span>());</span><br><span class="line">    <span class="comment">// 图片加载完成之后，应用滤镜效果</span></span><br><span class="line">    img.<span class="title function_">applyFilters</span>();</span><br><span class="line">    img.<span class="title function_">set</span>(&#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="number">250</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    canvas.<span class="title function_">add</span>(img);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="叠加滤镜"><a href="#叠加滤镜" class="headerlink" title="叠加滤镜"></a>叠加滤镜</h6><p>“filters” 属性是一个数组，我们可以用数组方法执行任何所需的操作：移除滤镜 (pop，splice，shift)，添加滤镜 (push，unshift，splice)，甚至可以组合多个滤镜。当我们调用 applyFilters 时，“filters” 数组中存在的任何滤镜将逐个应用，所以让我们尝试创建一个既色偏又明亮 ( Brightness ) 的图像。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fabric.<span class="property">Image</span>.<span class="title function_">fromURL</span>(<span class="built_in">require</span>(<span class="string">&quot;./aaa.jpeg&quot;</span>), <span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">    img.<span class="title function_">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">// 添加滤镜</span></span><br><span class="line">    img.<span class="property">filters</span>.<span class="title function_">push</span>(</span><br><span class="line">        <span class="keyword">new</span> fabric.<span class="property">Image</span>.<span class="property">filters</span>.<span class="title class_">Grayscale</span>(),</span><br><span class="line">        <span class="keyword">new</span> fabric.<span class="property">Image</span>.<span class="property">filters</span>.<span class="title class_">Sepia</span>(), <span class="comment">//色偏</span></span><br><span class="line">        <span class="keyword">new</span> fabric.<span class="property">Image</span>.<span class="property">filters</span>.<span class="title class_">Brightness</span>(&#123; <span class="attr">brightness</span>: <span class="number">0.2</span> &#125;) <span class="comment">//亮度</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 图片加载完成之后，应用滤镜效果</span></span><br><span class="line">    img.<span class="title function_">applyFilters</span>();</span><br><span class="line">    img.<span class="title function_">set</span>(&#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">300</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="number">250</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    canvas.<span class="title function_">add</span>(img);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>可以看到多个滤镜的效果叠加显示了,当然 Fabric 还支持自定义滤镜</p></blockquote><h5 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h5><blockquote><p>无论你是使用十六进制，RGB 或 RGBA 颜色，Fabric 都能处理的很好</p></blockquote><h6 id="定义颜色"><a href="#定义颜色" class="headerlink" title="定义颜色"></a>定义颜色</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;#f55&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;#aa3123&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;356333&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;rgb(100,50,100)&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;rgba(100, 200, 30, 0.5)&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="颜色转换"><a href="#颜色转换" class="headerlink" title="颜色转换"></a>颜色转换</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&#x27;#f55&#x27;</span>).<span class="title function_">toRgb</span>(); <span class="comment">// &quot;rgb(255,85,85)&quot;</span></span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&#x27;rgb(100,100,100)&#x27;</span>).<span class="title function_">toHex</span>(); <span class="comment">// &quot;646464&quot;</span></span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&#x27;fff&#x27;</span>).<span class="title function_">toHex</span>(); <span class="comment">// &quot;FFFFFF&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>​我们还可以用另一种颜色叠加，或将其转换为灰度版本。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redish = <span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;#f55&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> greenish = <span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;#5f5&quot;</span>);</span><br><span class="line">redish.<span class="title function_">overlayWith</span>(greenish).<span class="title function_">toHex</span>(); <span class="comment">// &quot;AAAA55&quot;</span></span><br><span class="line">redish.<span class="title function_">toGrayscale</span>().<span class="title function_">toHex</span>(); <span class="comment">// &quot;A1A1A1&quot;</span></span><br></pre></td></tr></table></figure><h6 id="定义颜色-1"><a href="#定义颜色-1" class="headerlink" title="定义颜色"></a>定义颜色</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;#f55&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;#aa3123&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;356333&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;rgb(100,50,100)&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> fabric.<span class="title class_">Color</span>(<span class="string">&quot;rgba(100, 200, 30, 0.5)&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h6><blockquote><p>Fabric 通过 setGradient 方法支持渐变，在所有对象上定义。调用 setGradient(‘fill’, { … })就像设置一个对象的“fill”值一样。</p></blockquote>       <style>      #color-canvas {        border: 1px solid #000;        margin: 10px;        width: 300px;        height: 300px;      }    </style>  <script src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js"></script>      <canvas id="color-canvas" width="300" height="300"></canvas>    <script>      const colorCanvas = new fabric.Canvas('color-canvas');   const colorCircle = new fabric.Circle({  left: 100,  top: 100,  radius: 50});​colorCircle.setGradient("fill", {    // 渐变开始的位置    x1: 0,    y1: 0,    // 渐变结束的位置    x2: circle.width,    y2: 0,    //渐变的颜色    colorStops: {        // 渐变的范围(0,0.1,0.3,0.5,0.75,1)0-1之间都可以        0: "red",        0.2: "orange",        0.4: "yellow",        0.6: "green",        0.8: "blue",        1: "purple"    },});colorCanvas.add(colorCircle);    </script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> fabric.<span class="title class_">Circle</span>(&#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">top</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">50</span></span><br><span class="line">&#125;);</span><br><span class="line">​</span><br><span class="line">circle.<span class="title function_">setGradient</span>(<span class="string">&quot;fill&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// 渐变开始的位置</span></span><br><span class="line">    <span class="attr">x1</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y1</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 渐变结束的位置</span></span><br><span class="line">    <span class="attr">x2</span>: circle.<span class="property">width</span>,</span><br><span class="line">    <span class="attr">y2</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">//渐变的颜色</span></span><br><span class="line">    <span class="attr">colorStops</span>: &#123;</span><br><span class="line">        <span class="comment">// 渐变的范围(0,0.1,0.3,0.5,0.75,1)0-1之间都可以</span></span><br><span class="line">        <span class="number">0</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">        <span class="number">0.2</span>: <span class="string">&quot;orange&quot;</span>,</span><br><span class="line">        <span class="number">0.4</span>: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">        <span class="number">0.6</span>: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">        <span class="number">0.8</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="string">&quot;purple&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">canvas.<span class="title function_">add</span>(circle);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h5><p>​fabric.Text 对象对于文本,提供了比 canvas 更丰富的功能，包括：</p><ol><li><p>支持多行Multiline support 不幸的是，原生文本方法忽略了新建一行。</p></li><li><p>文本对齐Text alignment 左，中，右。使用多行文本时很有用。</p></li><li><p>文本背景Text background 背景也支持文本对齐。</p></li><li><p>文字装饰Text decoration 下划线，上划线，贯穿线。</p></li><li><p>行高Line Height 在使用多行文本时有用。</p></li><li><p>字符间距Char spacing 使文本更紧凑或更间隔。</p></li><li><p>子范围Subranges 将颜色和属性应用到文本对象的子对象中。</p></li><li><p>多字节Multibyte 支持表情符号。</p></li><li><p>交互式画布编辑On canvas editing 可以直接在画布上键入文本。</p></li></ol>      <style>      #text-canvas {        border: 1px solid #000;        margin: 10px;        width: 300px;        height: 300px;      }    </style>  <script src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js"></script>      <canvas id="textCanvas" width="300" height="300"></canvas>    <script>      const textCanvas = new fabric.Canvas('textCanvas');       const text = new fabric.Textbox(    "大家好~\nHELLO~\nWORLD!",    {        left: 0,        top: 200,        fontFamily: "Comic Sans",         fontSize: 50,         fontWeight: 800,         underline: true,         linethrough: true,         overline: true,        fontStyle: "italic",         stroke: "#c3bfbf",         strokeWidth: 1,         textAlign: "center",        lineHeight: 1.5,        textBackgroundColor: "#91A8D0",     });textCanvas.add(text);​    </script><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><blockquote><p>​fabric 中通过 on 方法来初始化事件，off 方法用来删除事件。</p></blockquote><p>常用的事件有以下：</p><ol><li><p>mouse:down 鼠标被按下</p></li><li><p>object:add 对象被添加</p></li><li><p>after:render 渲染完成</p></li></ol><p>还有一大堆:<br>鼠标事件: mouse: down , mouse: move 和 mouse: up…<br>选择相关的事件：before: selection: cleared, selection: created, 详细的可以查看官方文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">canvas.<span class="title function_">on</span>(<span class="string">&quot;mouse:down&quot;</span>, <span class="keyword">function</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    canvas.<span class="title function_">clear</span>();</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">new</span> fabric.<span class="title class_">Text</span>(<span class="string">&quot;你点我啦~&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="number">200</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    canvas.<span class="title function_">add</span>(text);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(options.<span class="property">e</span>.<span class="property">clientX</span>, options.<span class="property">e</span>.<span class="property">clientY</span>);</span><br><span class="line">&#125;);</span><br><span class="line">canvas.<span class="title function_">on</span>(<span class="string">&quot;mouse:up&quot;</span>, <span class="keyword">function</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&quot;你没点我0.0&quot;</span>;</span><br><span class="line">    canvas.<span class="title function_">clear</span>();</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">new</span> fabric.<span class="title class_">Text</span>(<span class="string">&quot;你没点我0.0&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="number">200</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    canvas.<span class="title function_">add</span>(text);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(options.<span class="property">e</span>.<span class="property">clientX</span>, options.<span class="property">e</span>.<span class="property">clientY</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Fabric 允许将侦听器直接附加到 canvas 画布中的对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> rect = <span class="keyword">new</span> fabric.<span class="title class_">Rect</span>(&#123; <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">fill</span>: <span class="string">&quot;green&quot;</span> &#125;);</span><br><span class="line">    rect.<span class="title function_">on</span>(<span class="string">&quot;selected&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;选择了矩形&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">​</span><br><span class="line">    <span class="keyword">let</span> circle = <span class="keyword">new</span> fabric.<span class="title class_">Circle</span>(&#123; <span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">300</span>, <span class="attr">radius</span>: <span class="number">75</span>, <span class="attr">fill</span>: <span class="string">&quot;blue&quot;</span> &#125;);</span><br><span class="line">    circle.<span class="title function_">on</span>(<span class="string">&quot;selected&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;选择了圆形&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    canvas.<span class="title function_">add</span>(rect, circle);</span><br></pre></td></tr></table></figure><h5 id="自由绘画"><a href="#自由绘画" class="headerlink" title="自由绘画"></a>自由绘画</h5><blockquote><p>Fabric canvas 的 isDrawingMode 属性设置为 true 即可实现自由绘制模式.这样画布上的点击和移动就会被立刻解释为铅笔或刷子。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">canvas.<span class="property">isDrawingMode</span> = <span class="literal">true</span>;</span><br><span class="line">canvas.<span class="property">freeDrawingBrush</span>.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">canvas.<span class="property">freeDrawingBrush</span>.<span class="property">width</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="fabric-js-与-konva-对比"><a href="#fabric-js-与-konva-对比" class="headerlink" title="fabric.js 与 konva 对比"></a>fabric.js 与 konva 对比</h3><h4 id="fabric-js-的优点（star：24K）"><a href="#fabric-js-的优点（star：24K）" class="headerlink" title="fabric.js 的优点（star：24K）"></a>fabric.js 的优点（star：24K）</h4><blockquote><p>比较老牌，常用的转换（放大、缩小、拖拽）都已经封装好了，特别适合用 Canvas 写交互性的界面<br>内置了丰富的笔刷，基本的对齐、标线等功能齐全<br>代码集成度比较高，内置了可交互富文本（纯Canvas 实现）</p></blockquote><h4 id="fabric-js-的缺点"><a href="#fabric-js-的缺点" class="headerlink" title="fabric.js 的缺点"></a>fabric.js 的缺点</h4><p>由于库本身集成了很多功能点，代码包的大小偏大（压缩后308 kB）</p><p>细节功能还需要完善，比如标线系统实现相对简单, 竖向文字等</p><h4 id="konva-的优点（star：8k）"><a href="#konva-的优点（star：8k）" class="headerlink" title="konva 的优点（star：8k）"></a>konva 的优点（star：8k）</h4><ol><li><p>使用TypeScript 编写，TS 原生支持</p></li><li><p>渲染分层比较清晰，Stage -&gt; Layer -&gt; Group -&gt; Shape</p></li><li><p>代码简洁、干净，易于阅读</p></li><li><p>核心代码精简，代码包较小（压缩后155 kB）</p></li></ol><h4 id="konva-的缺点"><a href="#konva-的缺点" class="headerlink" title="konva 的缺点"></a>konva 的缺点</h4><ol><li><p>部分功能实现基于DOM（富文本）</p></li><li><p>后起之秀，周边生态还比较薄弱</p></li></ol><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>fabric.js 官网链接：<a href="http://fabricjs.com/">http://fabricjs.com/</a></p><p>fabric.js github链接：<a href="https://github.com/fabricjs/">https://github.com/fabricjs/</a></p><p>konva.js官网链接：<a href="https://konvajs.org/">https://konvajs.org/</a></p><p>konva.jsgithub链接：<a href="https://github.com/konvajs/konva">https://github.com/konvajs/konva</a></p><blockquote><p>md中不太好写demo，很多没有展示出效果，后面会做个组件库来完善（<strong>给自己花个饼🫓</strong>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 踩坑 —— 使用 Array.fill( ) 填充对象导致的重大问题</title>
      <link href="/2023/03/03/js-array-fill/"/>
      <url>/2023/03/03/js-array-fill/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| JavaScript创建二维数组时尽量不要使用Array.fill( )的嵌套方式</span><br></pre></td></tr></table></figure><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在公司在做 code review 中 直接写了 let list &#x3D; [[ ], [ ],[ ]] 是不很优雅，于是在后面的改动直接写成了 Array(4).fill([]) 发现了Array.fill()的问题。</p><h4 id="问题复现："><a href="#问题复现：" class="headerlink" title="问题复现："></a>问题复现：</h4><p>当我们想使用 Array.fill( ) 来填充一个全是对象的数组时需要特别注意，Array(5).fill([]) 这样填充创建的数组，里面每一项[]是完全相同的。 </p><img src="/2023/03/03/js-array-fill/array-fill.png" class="" title="本地图片"><h4 id="修改前："><a href="#修改前：" class="headerlink" title="修改前："></a>修改前：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list;</span><br><span class="line"><span class="title function_">swich</span>(<span class="params">type</span>) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;large&#x27;</span>: &#123;</span><br><span class="line">       list = [[],[],[],[],[],[],[]]</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;small&#x27;</span>: &#123;</span><br><span class="line">       list = [[],[],[],[],[]]</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attr">default</span>: &#123;</span><br><span class="line">        list = [[],[],[],[]]</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改后："><a href="#修改后：" class="headerlink" title="修改后："></a>修改后：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list;</span><br><span class="line"><span class="title function_">swich</span>(<span class="params">type</span>) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;large&#x27;</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">7</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;small&#x27;</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">4</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attr">default</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array-fill-定义"><a href="#Array-fill-定义" class="headerlink" title="Array.fill( ) 定义"></a>Array.fill( ) 定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fill() 方法用静态值填充数组中的指定元素。</span><br><span class="line">您可以指定开始和结束填充的位置。如果未指定，则将填充所有元素。</span><br><span class="line"></span><br><span class="line">|注：fill() 会覆盖原始数组。</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">fill</span>(value, start, end)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. value 必需。用于填充数组的值。</span></span><br><span class="line"><span class="comment">// 2. start 可选。开始填充数组的索引（默认为 0）。</span></span><br><span class="line"><span class="comment">// 3. end 可选。停止填充数组的索引（默认为 array.length）。</span></span><br></pre></td></tr></table></figure><h3 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> row = <span class="number">5</span>, col = <span class="number">1</span>  <span class="comment">// 5行1列</span></span><br><span class="line"><span class="comment">// 推荐写法</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>( <span class="title class_">Array</span>(row), <span class="function">() =&gt;</span>  <span class="title class_">Array</span>(col))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>(row).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Array</span>(col).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Js小技巧 </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>regex-css-module</title>
      <link href="/2022/08/17/regex-css-module/"/>
      <url>/2022/08/17/regex-css-module/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>在项目中要隐藏公共组件的某些样式，<br>而对应标签className为css.module样式（class&#x3D;’comp-element-list___1lBTC’），并且没有提供禁用对应功能的api，那我们该怎么做呢？</p></blockquote><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>第一时间考虑属性选择器是否可以使用，查阅mdn之后，发现，属性选择器可以使用正则匹配形式 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">属性选择器 - CSS（层叠样式表） | MDN (mozilla.org)</a></p><p>最终通过如下方式实现需求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// class*,中*表示class包含&quot;comp-element-list&quot;</span><br><span class="line">div[class*=&quot;comp-element-list&quot;] &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p><strong>CSS 属性选择器匹配</strong>那些具有特定属性或属性值的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 存在 title 属性的 &lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 href 属性并且属性值匹配&quot;https://example.org&quot;的 &lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;https://example.org&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 href 属性并且属性值包含&quot;example&quot;的 &lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">&quot;example&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 href 属性并且属性值结尾是&quot;.org&quot;的 &lt;a&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&quot;.org&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存在 class 属性并且属性值包含单词&quot;logo&quot;的&lt;a&gt;元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class~=<span class="string">&quot;logo&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[attr]</span><br><span class="line">表示带有以 attr 命名的属性的元素。</span><br><span class="line"></span><br><span class="line">[attr=value]</span><br><span class="line">表示带有以 attr 命名的属性，且属性值为 value 的元素。</span><br><span class="line"></span><br><span class="line">[attr~=value]</span><br><span class="line">表示带有以 attr 命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少有一个值为 value。</span><br><span class="line"></span><br><span class="line">[attr|=value]</span><br><span class="line">表示带有以 attr 命名的属性的元素，属性值为“value”或是以“value-”为前缀（- 为连字符，Unicode 编码为 U+002D）开头。典型的应用场景是用来匹配语言简写代码（如 zh-CN、zh-TW 可以用 zh 作为 value）。</span><br><span class="line"></span><br><span class="line">[attr^=value]</span><br><span class="line">表示带有以 attr 命名的属性，且属性值是以 value 开头的元素。</span><br><span class="line"></span><br><span class="line">[attr$=value]</span><br><span class="line">表示带有以 attr 命名的属性，且属性值是以 value 结尾的元素。</span><br><span class="line"></span><br><span class="line">[attr*=value]</span><br><span class="line">表示带有以 attr 命名的属性，且属性值至少包含一个 value 值的元素。</span><br><span class="line"></span><br><span class="line">[attr operator value i]</span><br><span class="line">在属性选择器的右方括号前添加一个用空格隔开的字母 i（或 I），可以在匹配属性值时忽略大小写（支持 ASCII 字符范围之内的字母）。</span><br><span class="line"></span><br><span class="line">[attr operator value s] 实验性</span><br><span class="line">在属性选择器的右方括号前添加一个用空格隔开的字母 s（或 S），可以在匹配属性值时区分大小写（支持 ASCII 字符范围之内的字母）。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 高级类型</title>
      <link href="/2022/07/03/typescript-02/"/>
      <url>/2022/07/03/typescript-02/</url>
      
        <content type="html"><![CDATA[<h3 id="1-联合类型"><a href="#1-联合类型" class="headerlink" title="1. 联合类型"></a>1. 联合类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 首先是联合类型的介绍 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 变量a的类型既可以是string，也可以是number</span></span><br><span class="line">a = <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="2-Pick"><a href="#2-Pick" class="headerlink" title="2. Pick"></a>2. Pick</h3><blockquote><p>选择</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="title class_">Pick</span>&lt;<span class="title class_">UserInfo</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;; <span class="comment">// age 依然可选</span></span><br></pre></td></tr></table></figure><h3 id="3-Omit"><a href="#3-Omit" class="headerlink" title="3. Omit"></a>3. Omit</h3><blockquote><p>类似于 Exclude， 可以排除类型中一部分的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">uid</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">created</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">updated</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例如在用户中有这么多属性，</span></span><br><span class="line"><span class="comment"> * 但 uid，created，updated  是注册时服务器产生的，</span></span><br><span class="line"><span class="comment"> * 所以 需要省略一些属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RegisterUser</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">UserInfo</span>, <span class="string">&#x27;uid&#x27;</span> | <span class="string">&#x27;created&#x27;</span> | <span class="string">&#x27;updated&#x27;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">h</span>: <span class="title class_">RegisterUser</span> = &#123;&#125;  </span><br><span class="line"><span class="comment">// 类型“&#123;&#125;”缺少类型“RegisterUser”中的以下属性: name, password</span></span><br></pre></td></tr></table></figure><h3 id="4-keyof"><a href="#4-keyof" class="headerlink" title="4. keyof"></a>4. keyof</h3><blockquote><p>将一个类型的属性名全部提取出来当做联合类型</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Users</span> = keyof <span class="title class_">UserInfo</span>; <span class="comment">// 等同于 type Users = &quot;name&quot; | &quot;age&quot; | &quot;sex&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">Users</span> = <span class="string">&#x27;name&#x27;</span> <span class="comment">// 可以</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">Users</span> = <span class="string">&#x27;age&#x27;</span> <span class="comment">// 可以</span></span><br><span class="line"><span class="comment">// const p3: Users = &#x27;height&#x27; </span></span><br><span class="line"><span class="comment">// 不可以 不能将类型“&quot;height&quot;”分配给类型“keyof UserInfo”</span></span><br></pre></td></tr></table></figure><h3 id="5-Record"><a href="#5-Record" class="headerlink" title="5. Record"></a>5. Record</h3><blockquote><p>在 TS 中，类似数组、字符串、数组、接口这些常见的类型都非常常见，但是如果要定义一个对象的 key 和 value 类型该怎么做呢？这时候就需要用到 TS 的 Record 了</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PageInfo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Page</span> = <span class="string">&quot;home&quot;</span> | <span class="string">&quot;about&quot;</span> | <span class="string">&quot;contact&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">nav</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Page</span>, <span class="title class_">PageInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">home</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;home&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">about</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;about&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">contact</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;contact&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-Exclude"><a href="#6-Exclude" class="headerlink" title="6. Exclude"></a>6. Exclude</h3><blockquote><p>(<strong>排除</strong>) 可以排除 联合类型 中一部分的内容</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyTypes</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;sex&#x27;</span>;</span><br><span class="line"><span class="comment">// Exclude(排除)</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">e</span>: <span class="title class_">Exclude</span>&lt;<span class="title class_">MyTypes</span>, <span class="string">&quot;name&quot;</span>&gt; = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="comment">// const j: Exclude&lt;MyTypes, &quot;name&quot;&gt; = &#x27;name&#x27;</span></span><br><span class="line"><span class="comment">// 不能将类型“&quot;name&quot;”分配给类型“&quot;age&quot; | &quot;sex&quot;”。</span></span><br></pre></td></tr></table></figure><h3 id="7-Partial"><a href="#7-Partial" class="headerlink" title="7. Partial"></a>7. Partial</h3><p>(<strong>部分的; 不完全的</strong>) ts中就是让一个定义中的所有属性都变成可选 有时候模拟数据时数据不全，但又不想（或不能）破坏原有结构</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">UserInfo</span>&gt; = &#123;&#125; <span class="comment">// 全部参数可选</span></span><br></pre></td></tr></table></figure><h3 id="8-Required"><a href="#8-Required" class="headerlink" title="8. Required"></a>8. Required</h3><blockquote><p>(<strong>必须的</strong>） 和Partial刚好相反，将一个定义中的属性全部变成必选 </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Required</span>&lt;<span class="title class_">UserInfo</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="9-Readonly"><a href="#9-Readonly" class="headerlink" title="9. Readonly"></a>9. Readonly</h3><blockquote><p>(<strong>只读</strong>) 就是让一个定义中的所有属性都变成只读参数</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">d</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">UserInfo</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await 怎么更优雅的处理报错</title>
      <link href="/2022/05/09/async-await/"/>
      <url>/2022/05/09/async-await/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise封装请求"><a href="#Promise封装请求" class="headerlink" title="Promise封装请求"></a>Promise封装请求</h2><p>一般我们在使用Promise链式调用会显得代码不那么优雅，如果出现嵌套的问题，可读性较就会很差。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 封装请求函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">url, params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">request</span>(</span><br><span class="line">    <span class="string">&#x27;/basic/login&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// success do something</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fail do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>promise reject catch</strong> 错误处理：<strong>async</strong>函数返回一个<strong>Promise对象</strong>，其内部抛出错误，会导致返回的<strong>Promise对象</strong>变为<strong>reject状态</strong>，可以通过<strong>catch</strong>函数进行错误兜底。</p><h2 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p>async&#x2F;await他的作用是：用同步的方式执行异步操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/basic/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> info = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/basic/getuserinfo&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: res.<span class="property">id</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setUserInfo</span>(info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 错误处理：通过try...catch 将await错误包裹在try...catch代码块中，进行异常捕获。</span><br></pre></td></tr></table></figure><h2 id="await-to-js"><a href="#await-to-js" class="headerlink" title="await-to-js"></a>await-to-js</h2><p>await-to-js 已经帮我们做了这件事，我们可以看看它是怎么做的，它的源码只有短短十几行，我们应该读读它的源码，学学它的思想。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"> Promise </span>&#125; 传进去的请求函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"> Object= </span>&#125; <span class="variable">errorExt</span> - 拓展错误对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type"> Promise </span>&#125; 返回一个Promise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">to</span>(<span class="params"></span></span><br><span class="line"><span class="params">  promise,</span></span><br><span class="line"><span class="params">  errorExt</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> [<span class="literal">null</span>, data])</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (errorExt) &#123;</span><br><span class="line">        <span class="keyword">const</span> parsedError = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, err, errorExt)</span><br><span class="line">        <span class="keyword">return</span> [parsedError, <span class="literal">undefined</span>]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> [err, <span class="literal">undefined</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> to;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [resErr, res] = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">request</span>(<span class="string">&#x27;/basic/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (resErr) &#123;</span><br><span class="line">    <span class="comment">// fail do somthing</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [userErr, info] = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">request</span>(<span class="string">&#x27;/basic/getuserinfo&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: res.<span class="property">id</span></span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (userErr) &#123;</span><br><span class="line">    <span class="comment">// fail do somthing</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setUserInfo</span>(init);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码总结</strong>：to 函数返回一个 Promise 且值是一个数组，数组之中有两个元素，如果索引为0的元素不为空值，说明该请求报错，如果索引0的元素为空值说明该请求没有报错，也就是成功。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Js小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 之 url转义encodeURI()、encodeURIComponent()和escape()</title>
      <link href="/2022/03/06/url-encode/"/>
      <url>/2022/03/06/url-encode/</url>
      
        <content type="html"><![CDATA[<p>当URL的参数中出现诸如+，空格，&#x2F;，?，%，#，&amp;，&#x3D;等特殊字符串符号时，因为上述字符有特殊含义，导致服务器端无法正确解析参数，如何处理？解决办法：将这些字符转化成服务器可以识别的字符。</p><img src="/2022/03/06/url-encode/640.png" class="" title="本地图片"><h2 id="一-encodeURI"><a href="#一-encodeURI" class="headerlink" title="一. encodeURI()"></a>一. encodeURI()</h2><p>把字符串作为 URI整体进行编码，所以URI组件中的特殊分隔符号 (;&#x2F;:@&amp;&#x3D;+$?#） (可以使用 encodeURIComponent() 方法分别对特殊含义的 ASCII 标点符号进行编码。)，encodeURI() 函数不会进行转义。该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码：- _ . ! ~ * ‘ ( ) 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;_&#x27;</span>) <span class="comment">// &#x27;_&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// 输出：&#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="二-encodeURIComponent"><a href="#二-encodeURIComponent" class="headerlink" title="二. encodeURIComponent()"></a>二. encodeURIComponent()</h2><p>把字符串作为 URI 组件的一部分（如path&#x2F;query&#x2F;fragment等）进行编码，所以用于分隔 URI 各个部分的特殊分隔符号（;&#x2F;?:@&amp;&#x3D;+$,#）也会被转义。返回值中某些字符将被十六进制的转义序列替换。该方法也不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码：- _ . ! ~ * ‘ ( ) 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;;&#x27;</span>) <span class="comment">// &#x27;%3B&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// &#x27;%23&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="三-decodeURI-x2F-decodeURIComponent"><a href="#三-decodeURI-x2F-decodeURIComponent" class="headerlink" title="三. decodeURI()&#x2F;decodeURIComponent()"></a>三. decodeURI()&#x2F;decodeURIComponent()</h2><p>decodeURI() 函数可对 encodeURI() 函数编码过的 URI 进行解码。<br>decodeURIComponent() 函数可对 encodeURIComponent() 函数编码的 URI 进行解码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%3B&#x27;</span>) <span class="comment">// &#x27;;&#x27;</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%23&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2</span></span><br></pre></td></tr></table></figure><h2 id="四-escape"><a href="#四-escape" class="headerlink" title="四. escape()"></a>四. escape()</h2><p>用于对字符串进行编码，并返回编码字符串。但目前已不推荐使用该函数对URI进行编码。<em>（已经弃用）</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%3B&#x27;</span>) <span class="comment">// &#x27;;&#x27;</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%23&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2</span></span><br></pre></td></tr></table></figure><h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><p><strong>在项目中哪里会用到呢？</strong><br>假如你要给后端传一个16进制 HEX值（#FFFFFF），那么你就会用到encodeURIComponent去转义。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git cherry-pick 使用</title>
      <link href="/2021/04/14/git-06/"/>
      <url>/2021/04/14/git-06/</url>
      
        <content type="html"><![CDATA[<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>在本地分支合入其他分支时，如果不想对整个分支进行合并，而只想对其中的某一次提交合并到当前本地分支，就需要使用 git cherry-pick 。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在实际的项目开发过程中，经常会在版本迭代的过程中，发现一些老版本遗留的问题。这时候，在新版本上针对该问题提交的修复，使用 git cherry-pick 就很容易应用到老版本上了。</p><p>例如：我们在某个项目的 feat&#x2F;1.2.0 版本分支进行开发时，发现了 feat&#x2F;1.1.0  版本遗留下来的一个问题。我们在 feat&#x2F;1.2.0版本将其修复之后，还想将该修复应用于 feat&#x2F;1.1.0 版本，这时候，只需要使用 git cherry-pick 命令即可。</p><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p>假设我们在 feat&#x2F;1.2.0 分支，并且已经针对 feat&#x2F;1.1.0分支的问题进行了修复，产生了一次提交 09f76ee4a 。（如何查看提交的哈希序列： git log –oneline -3 ， 单行显示最近 3 条提交信息）。</p><p><strong>具体流程如下:</strong></p><ol><li>切换到目标分支： git checkout feat&#x2F;1.1.0 </li><li>应用修复： git cherry-pick 09f76ee4a</li><li>应用成功之后直接 git push</li></ol><blockquote></blockquote><ul><li>如果成功应用修复，会有类似如下信息:<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git cherry<span class="literal">-pick</span> <span class="number">09</span>f7ee67e</span><br><span class="line">[<span class="type">feat</span>/<span class="number">1.1</span><span class="type">.0</span>  <span class="number">87</span><span class="type">f15e9ef</span>] fix: xxxxxxxxx</span><br><span class="line">Date: Wed Sep <span class="number">4</span> <span class="number">12</span>:<span class="number">44</span>:<span class="number">49</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">10</span> insertions(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure></li><li>如果出现如下类似信息：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git cherry<span class="literal">-pick</span> <span class="number">49006</span>ed7a</span><br><span class="line">error: could not apply <span class="number">49006</span>ed7a... fix: xxxxxxxxxx</span><br><span class="line">hint: after resolving the conflicts, mark the corrected paths</span><br><span class="line">hint: with <span class="string">&#x27;git add &lt;paths&gt;&#x27;</span> or <span class="string">&#x27;git rm &lt;paths&gt;&#x27;</span></span><br><span class="line">hint: and commit the result with <span class="string">&#x27;git commit&#x27;</span></span><br></pre></td></tr></table></figure>说明出现冲突，需要手动修复（具体流程与 git merge 冲突解决相同）。解决冲突之后，使用 git add  和 git commit  命令手动进行提交。</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote></blockquote><ul><li>如果要放弃本地 cherry-pick 恢复到命令执行之前的状态，使用命令 git cherry-pick –abort</li><li>如果有多个提交，并且中间过程出现冲突，解决冲突之后，使用 git cherry-pick –continue  继续下一个提交</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-MR 冲突解决</title>
      <link href="/2021/04/14/git-05/"/>
      <url>/2021/04/14/git-05/</url>
      
        <content type="html"><![CDATA[<p>将代码合并到主分支的请求。当发起者发起 MR时，系统会自动将该分支或者仓库的代码和主分支的代码合并，如果发现冲突则需要进行解决。</p><p>示例：从 feat&#x2F;1.1.2 分支提 MR 到 feat&#x2F;1.1.1 分支</p><blockquote><blockquote></blockquote></blockquote><ol><li>切换到目标分支：git checkout feat&#x2F;1.1.1</li><li>更新代码：git pull</li><li>切换到源分支：git checkout feat&#x2F;1.1.2</li><li>运行merge命令查看冲突文件：git merge feat&#x2F;1.1.1</li><li>解决冲突：按住cmd，点击冲突文件可以跳到冲突代码处，选择更改或保留</li><li>添加更改文件：git add .</li><li>提交代码更改：git commit，这里不输入-m，可以自动保留分支的 merge信息</li><li>推送到远程分支：git push</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 回退到某个版本命名操作</title>
      <link href="/2021/03/24/git-04/"/>
      <url>/2021/03/24/git-04/</url>
      
        <content type="html"><![CDATA[<h4 id="第一步，查看提交的版本号"><a href="#第一步，查看提交的版本号" class="headerlink" title="第一步，查看提交的版本号"></a>第一步，查看提交的版本号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">//会出现如下信息：</span><br><span class="line">// commit 2c5d**********13778dfb95f (HEAD -&gt; feat/1.*.*, tag: publish/1.*.*, master)</span><br><span class="line">// Merge: 27c****c 9c****0</span><br><span class="line">// Author: ****</span><br><span class="line">// Date:   *** *** 14:15:45 ***</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第二步，回退到目标版本"><a href="#第二步，回退到目标版本" class="headerlink" title="第二步，回退到目标版本"></a>第二步，回退到目标版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号xxx</span><br><span class="line"></span><br><span class="line">// 版本号xxx 指的就是 commit 后面 2c5d**********13778dfb95f</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三步，提交代码"><a href="#第三步，提交代码" class="headerlink" title="第三步，提交代码"></a>第三步，提交代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f -u origin &lt;分支名xxx&gt;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>回退到某个commit后会将该commit之后的commit丢弃掉<br>如果后代码有用，最好在回退之前先将该分支备份。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 分支重命名操作</title>
      <link href="/2021/03/24/git-03/"/>
      <url>/2021/03/24/git-03/</url>
      
        <content type="html"><![CDATA[<h3 id="1、本地分支重命名"><a href="#1、本地分支重命名" class="headerlink" title="1、本地分支重命名"></a>1、本地分支重命名</h3><p>本地分支是指：你当前这个分支还没有推送到远程的情况，这种情况修改分支名称就要方便很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;旧分支名&gt; &lt;新分支名&gt;</span><br></pre></td></tr></table></figure><p>其中，-m 表示 move，即移动或重命名分支。例如，将 feature-1 分支重命名为 feature-new 分支，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m feature-1 feature-new</span><br></pre></td></tr></table></figure><h3 id="2、远程分支重命名"><a href="#2、远程分支重命名" class="headerlink" title="2、远程分支重命名"></a>2、远程分支重命名</h3><p>如果要在本地和远程同时重命名分支，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;旧分支名&gt; &lt;新分支名&gt;</span><br><span class="line">git push --set-upstream origin &lt;新分支名&gt;</span><br><span class="line">git push origin --delete &lt;旧分支名&gt;</span><br></pre></td></tr></table></figure><p>其中，<strong>git push –set-upstream origin &lt;新分支名&gt;</strong> 用于将本地新分支和远程新分支关联，<strong>git push origin –delete &lt;旧分支名&gt;</strong> 用于删除远程旧分支。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="https://link.zhihu.com/?target=https://opensource.com/article/22/4/git-branches">《用乐高来类比解释 Git 分支》</a>，作者：Seth Kenlon<br><a href="https://link.zhihu.com/?target=https://opensource.com/article/22/4/git-push">《我的 Git push 命令的安全使用指南》</a>，作者：Noaa Barki<br><a href="https://link.zhihu.com/?target=https://opensource.com/article/18/5/git-branching">《Git 分支指南》</a>，作者：Kedar Vijay Kulkarni</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 提交规范</title>
      <link href="/2021/03/11/git-02/"/>
      <url>/2021/03/11/git-02/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git 每次提交代码，应清晰明了的写明本次提交的目的。</span><br></pre></td></tr></table></figure><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用于说明git commit的类别，只允许使用下面的标识。</span><br><span class="line">● feat：新功能（feature）</span><br><span class="line">● fix：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG</span><br><span class="line">● docs：文档（documentation）</span><br><span class="line">● style：格式（不影响代码运行的变动）</span><br><span class="line">● refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">● perf：优化相关，比如提升性能、体验</span><br><span class="line">● test：增加测试</span><br><span class="line">● chore：构建过程或辅助工具的变动</span><br><span class="line">● revert：回滚到上一个版本</span><br><span class="line">● merge：代码合并</span><br><span class="line">● sync：同步主线或分支的Bug</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 基本常用命令</title>
      <link href="/2021/03/08/git-01/"/>
      <url>/2021/03/08/git-01/</url>
      
        <content type="html"><![CDATA[<ol><li>git add [file]：向暂存区添加文件或文件夹。</li><li>git commit -m “message”：提交暂存区的文件或文件夹到本地仓库并添加 commit message。</li><li>git status：查看当前工作区、暂存区、本地仓库的文件状态。</li><li>git log：查看本地仓库的提交日志。</li><li>git checkout [branch]：切换到指定分支或者 commit。</li><li>git branch：查看所有本地分支。</li><li>git branch [branch]：创建新的分支。</li><li>git merge [branch]：将指定分支合并到当前分支。</li><li>git push：将本地分支推送到远程分支。</li><li>git pull：从远程分支拉取到本地分支。</li><li>git clone [url]：克隆远程仓库到本地。</li><li>git remote add [name] [url]：添加远程仓库并命名。</li><li>git stash：将当前工作区的修改暂存起来。</li><li>git stash apply：恢复最近一次 stash 的修改。</li><li>git diff：查看工作区和暂存区、本地仓库之间的文件差异。</li><li>git reset [file]：取消暂存区的文件修改。</li><li>git rm [file]：将文件从版本控制中删除。</li><li>git tag [version]：给当前 commit 打上标签。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
