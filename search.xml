<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript 踩坑 —— 使用 Array.fill( ) 填充对象导致的重大问题</title>
      <link href="/2023/03/03/js-array-fill/"/>
      <url>/2023/03/03/js-array-fill/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| JavaScript创建二维数组时尽量不要使用Array.fill( )的嵌套方式</span><br></pre></td></tr></table></figure><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在公司在做 code review 中 直接写了 let list &#x3D; [[ ], [ ],[ ]] 是不很优雅，于是在后面的改动直接写成了 Array(4).fill([]) 发现了Array.fill()的问题。</p><h4 id="问题复现："><a href="#问题复现：" class="headerlink" title="问题复现："></a>问题复现：</h4><p>当我们想使用 Array.fill( ) 来填充一个全是对象的数组时需要特别注意，Array(5).fill([]) 这样填充创建的数组，里面每一项[]是完全相同的。 </p><img src="/2023/03/03/js-array-fill/array-fill.png" class="" title="本地图片"><h4 id="修改前："><a href="#修改前：" class="headerlink" title="修改前："></a>修改前：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list;</span><br><span class="line"><span class="title function_">swich</span>(<span class="params">type</span>) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;large&#x27;</span>: &#123;</span><br><span class="line">       list = [[],[],[],[],[],[],[]]</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;small&#x27;</span>: &#123;</span><br><span class="line">       list = [[],[],[],[],[]]</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attr">default</span>: &#123;</span><br><span class="line">        list = [[],[],[],[]]</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改后："><a href="#修改后：" class="headerlink" title="修改后："></a>修改后：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list;</span><br><span class="line"><span class="title function_">swich</span>(<span class="params">type</span>) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;large&#x27;</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">7</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;small&#x27;</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">4</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attr">default</span>: &#123;</span><br><span class="line">       list = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>),<span class="function">() =&gt;</span> <span class="title class_">Array</span>())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array-fill-定义"><a href="#Array-fill-定义" class="headerlink" title="Array.fill( ) 定义"></a>Array.fill( ) 定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fill() 方法用静态值填充数组中的指定元素。</span><br><span class="line">您可以指定开始和结束填充的位置。如果未指定，则将填充所有元素。</span><br><span class="line"></span><br><span class="line">|注：fill() 会覆盖原始数组。</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">fill</span>(value, start, end)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. value 必需。用于填充数组的值。</span></span><br><span class="line"><span class="comment">// 2. start 可选。开始填充数组的索引（默认为 0）。</span></span><br><span class="line"><span class="comment">// 3. end 可选。停止填充数组的索引（默认为 array.length）。</span></span><br></pre></td></tr></table></figure><h3 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> row = <span class="number">5</span>, col = <span class="number">1</span>  <span class="comment">// 5行1列</span></span><br><span class="line"><span class="comment">// 推荐写法</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>( <span class="title class_">Array</span>(row), <span class="function">() =&gt;</span>  <span class="title class_">Array</span>(col))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>(row).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title class_">Array</span>(col).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Js小技巧 </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 高级类型</title>
      <link href="/2022/07/03/typescript-02/"/>
      <url>/2022/07/03/typescript-02/</url>
      
        <content type="html"><![CDATA[<h3 id="1-联合类型"><a href="#1-联合类型" class="headerlink" title="1. 联合类型"></a>1. 联合类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 首先是联合类型的介绍 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 变量a的类型既可以是string，也可以是number</span></span><br><span class="line">a = <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="2-Pick"><a href="#2-Pick" class="headerlink" title="2. Pick"></a>2. Pick</h3><blockquote><p>选择</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="title class_">Pick</span>&lt;<span class="title class_">UserInfo</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;; <span class="comment">// age 依然可选</span></span><br></pre></td></tr></table></figure><h3 id="3-Omit"><a href="#3-Omit" class="headerlink" title="3. Omit"></a>3. Omit</h3><blockquote><p>类似于 Exclude， 可以排除类型中一部分的属性</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">uid</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">created</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">updated</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例如在用户中有这么多属性，</span></span><br><span class="line"><span class="comment"> * 但 uid，created，updated  是注册时服务器产生的，</span></span><br><span class="line"><span class="comment"> * 所以 需要省略一些属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RegisterUser</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">UserInfo</span>, <span class="string">&#x27;uid&#x27;</span> | <span class="string">&#x27;created&#x27;</span> | <span class="string">&#x27;updated&#x27;</span>&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">h</span>: <span class="title class_">RegisterUser</span> = &#123;&#125;  </span><br><span class="line"><span class="comment">// 类型“&#123;&#125;”缺少类型“RegisterUser”中的以下属性: name, password</span></span><br></pre></td></tr></table></figure><h3 id="4-keyof"><a href="#4-keyof" class="headerlink" title="4. keyof"></a>4. keyof</h3><blockquote><p>将一个类型的属性名全部提取出来当做联合类型</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Users</span> = keyof <span class="title class_">UserInfo</span>; <span class="comment">// 等同于 type Users = &quot;name&quot; | &quot;age&quot; | &quot;sex&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">Users</span> = <span class="string">&#x27;name&#x27;</span> <span class="comment">// 可以</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">Users</span> = <span class="string">&#x27;age&#x27;</span> <span class="comment">// 可以</span></span><br><span class="line"><span class="comment">// const p3: Users = &#x27;height&#x27; </span></span><br><span class="line"><span class="comment">// 不可以 不能将类型“&quot;height&quot;”分配给类型“keyof UserInfo”</span></span><br></pre></td></tr></table></figure><h3 id="5-Record"><a href="#5-Record" class="headerlink" title="5. Record"></a>5. Record</h3><blockquote><p>在 TS 中，类似数组、字符串、数组、接口这些常见的类型都非常常见，但是如果要定义一个对象的 key 和 value 类型该怎么做呢？这时候就需要用到 TS 的 Record 了</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PageInfo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Page</span> = <span class="string">&quot;home&quot;</span> | <span class="string">&quot;about&quot;</span> | <span class="string">&quot;contact&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">nav</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Page</span>, <span class="title class_">PageInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">home</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;home&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">about</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;about&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">contact</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;contact&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-Exclude"><a href="#6-Exclude" class="headerlink" title="6. Exclude"></a>6. Exclude</h3><blockquote><p>(<strong>排除</strong>) 可以排除 联合类型 中一部分的内容</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyTypes</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;sex&#x27;</span>;</span><br><span class="line"><span class="comment">// Exclude(排除)</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">e</span>: <span class="title class_">Exclude</span>&lt;<span class="title class_">MyTypes</span>, <span class="string">&quot;name&quot;</span>&gt; = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="comment">// const j: Exclude&lt;MyTypes, &quot;name&quot;&gt; = &#x27;name&#x27;</span></span><br><span class="line"><span class="comment">// 不能将类型“&quot;name&quot;”分配给类型“&quot;age&quot; | &quot;sex&quot;”。</span></span><br></pre></td></tr></table></figure><h3 id="7-Partial"><a href="#7-Partial" class="headerlink" title="7. Partial"></a>7. Partial</h3><p>(<strong>部分的; 不完全的</strong>) ts中就是让一个定义中的所有属性都变成可选 有时候模拟数据时数据不全，但又不想（或不能）破坏原有结构</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">UserInfo</span>&gt; = &#123;&#125; <span class="comment">// 全部参数可选</span></span><br></pre></td></tr></table></figure><h3 id="8-Required"><a href="#8-Required" class="headerlink" title="8. Required"></a>8. Required</h3><blockquote><p>(<strong>必须的</strong>） 和Partial刚好相反，将一个定义中的属性全部变成必选 </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Required</span>&lt;<span class="title class_">UserInfo</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="9-Readonly"><a href="#9-Readonly" class="headerlink" title="9. Readonly"></a>9. Readonly</h3><blockquote><p>(<strong>只读</strong>) 就是让一个定义中的所有属性都变成只读参数</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">d</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">UserInfo</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await 怎么更优雅的处理报错</title>
      <link href="/2022/05/09/async-await/"/>
      <url>/2022/05/09/async-await/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise封装请求"><a href="#Promise封装请求" class="headerlink" title="Promise封装请求"></a>Promise封装请求</h2><p>一般我们在使用Promise链式调用会显得代码不那么优雅，如果出现嵌套的问题，可读性较就会很差。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 封装请求函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">url, params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">request</span>(</span><br><span class="line">    <span class="string">&#x27;/basic/login&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// success do something</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fail do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>promise reject catch</strong> 错误处理：<strong>async</strong>函数返回一个<strong>Promise对象</strong>，其内部抛出错误，会导致返回的<strong>Promise对象</strong>变为<strong>reject状态</strong>，可以通过<strong>catch</strong>函数进行错误兜底。</p><h2 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p>async&#x2F;await他的作用是：用同步的方式执行异步操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/basic/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> info = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/basic/getuserinfo&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: res.<span class="property">id</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setUserInfo</span>(info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 错误处理：通过try...catch 将await错误包裹在try...catch代码块中，进行异常捕获。</span><br></pre></td></tr></table></figure><h2 id="await-to-js"><a href="#await-to-js" class="headerlink" title="await-to-js"></a>await-to-js</h2><p>await-to-js 已经帮我们做了这件事，我们可以看看它是怎么做的，它的源码只有短短十几行，我们应该读读它的源码，学学它的思想。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"> Promise </span>&#125; 传进去的请求函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"> Object= </span>&#125; <span class="variable">errorExt</span> - 拓展错误对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type"> Promise </span>&#125; 返回一个Promise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">to</span>(<span class="params"></span></span><br><span class="line"><span class="params">  promise,</span></span><br><span class="line"><span class="params">  errorExt</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> [<span class="literal">null</span>, data])</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (errorExt) &#123;</span><br><span class="line">        <span class="keyword">const</span> parsedError = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, err, errorExt)</span><br><span class="line">        <span class="keyword">return</span> [parsedError, <span class="literal">undefined</span>]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> [err, <span class="literal">undefined</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> to;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [resErr, res] = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">request</span>(<span class="string">&#x27;/basic/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">usename</span>: <span class="string">&#x27;yangfan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (resErr) &#123;</span><br><span class="line">    <span class="comment">// fail do somthing</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> [userErr, info] = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">request</span>(<span class="string">&#x27;/basic/getuserinfo&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: res.<span class="property">id</span></span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (userErr) &#123;</span><br><span class="line">    <span class="comment">// fail do somthing</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setUserInfo</span>(init);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码总结</strong>：to 函数返回一个 Promise 且值是一个数组，数组之中有两个元素，如果索引为0的元素不为空值，说明该请求报错，如果索引0的元素为空值说明该请求没有报错，也就是成功。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Js小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 之 url转义encodeURI()、encodeURIComponent()和escape()</title>
      <link href="/2022/03/06/url-encode/"/>
      <url>/2022/03/06/url-encode/</url>
      
        <content type="html"><![CDATA[<p>当URL的参数中出现诸如+，空格，&#x2F;，?，%，#，&amp;，&#x3D;等特殊字符串符号时，因为上述字符有特殊含义，导致服务器端无法正确解析参数，如何处理？解决办法：将这些字符转化成服务器可以识别的字符。</p><img src="/2022/03/06/url-encode/640.png" class="" title="本地图片"><h2 id="一-encodeURI"><a href="#一-encodeURI" class="headerlink" title="一. encodeURI()"></a>一. encodeURI()</h2><p>把字符串作为 URI整体进行编码，所以URI组件中的特殊分隔符号 (;&#x2F;:@&amp;&#x3D;+$?#） (可以使用 encodeURIComponent() 方法分别对特殊含义的 ASCII 标点符号进行编码。)，encodeURI() 函数不会进行转义。该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码：- _ . ! ~ * ‘ ( ) 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;_&#x27;</span>) <span class="comment">// &#x27;_&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// 输出：&#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="二-encodeURIComponent"><a href="#二-encodeURIComponent" class="headerlink" title="二. encodeURIComponent()"></a>二. encodeURIComponent()</h2><p>把字符串作为 URI 组件的一部分（如path&#x2F;query&#x2F;fragment等）进行编码，所以用于分隔 URI 各个部分的特殊分隔符号（;&#x2F;?:@&amp;&#x3D;+$,#）也会被转义。返回值中某些字符将被十六进制的转义序列替换。该方法也不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码：- _ . ! ~ * ‘ ( ) 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;;&#x27;</span>) <span class="comment">// &#x27;%3B&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;#&#x27;</span>) <span class="comment">// &#x27;%23&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="三-decodeURI-x2F-decodeURIComponent"><a href="#三-decodeURI-x2F-decodeURIComponent" class="headerlink" title="三. decodeURI()&#x2F;decodeURIComponent()"></a>三. decodeURI()&#x2F;decodeURIComponent()</h2><p>decodeURI() 函数可对 encodeURI() 函数编码过的 URI 进行解码。<br>decodeURIComponent() 函数可对 encodeURIComponent() 函数编码的 URI 进行解码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%3B&#x27;</span>) <span class="comment">// &#x27;;&#x27;</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%23&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2</span></span><br></pre></td></tr></table></figure><h2 id="四-escape"><a href="#四-escape" class="headerlink" title="四. escape()"></a>四. escape()</h2><p>用于对字符串进行编码，并返回编码字符串。但目前已不推荐使用该函数对URI进行编码。<em>（已经弃用）</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https://mp.weixin.qq.com/&#x27;</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%3B&#x27;</span>) <span class="comment">// &#x27;;&#x27;</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&#x27;%23&#x27;</span>) <span class="comment">// &#x27;#&#x27;</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;https%3A%2F%2Fmp.weixin.qq.com%2Fcgi-bin%2Fappmsg%3Ft%3Dmedia%2Fappmsg_edit_v2&#x27;</span>)</span><br><span class="line"><span class="comment">// https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2</span></span><br></pre></td></tr></table></figure><h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><p><strong>在项目中哪里会用到呢？</strong><br>假如你要给后端传一个16进制 HEX值（#FFFFFF），那么你就会用到encodeURIComponent去转义。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git cherry-pick 使用</title>
      <link href="/2021/04/14/git-06/"/>
      <url>/2021/04/14/git-06/</url>
      
        <content type="html"><![CDATA[<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>在本地分支合入其他分支时，如果不想对整个分支进行合并，而只想对其中的某一次提交合并到当前本地分支，就需要使用 git cherry-pick 。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在实际的项目开发过程中，经常会在版本迭代的过程中，发现一些老版本遗留的问题。这时候，在新版本上针对该问题提交的修复，使用 git cherry-pick 就很容易应用到老版本上了。</p><p>例如：我们在某个项目的 feat&#x2F;1.2.0 版本分支进行开发时，发现了 feat&#x2F;1.1.0  版本遗留下来的一个问题。我们在 feat&#x2F;1.2.0版本将其修复之后，还想将该修复应用于 feat&#x2F;1.1.0 版本，这时候，只需要使用 git cherry-pick 命令即可。</p><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p>假设我们在 feat&#x2F;1.2.0 分支，并且已经针对 feat&#x2F;1.1.0分支的问题进行了修复，产生了一次提交 09f76ee4a 。（如何查看提交的哈希序列： git log –oneline -3 ， 单行显示最近 3 条提交信息）。</p><p><strong>具体流程如下:</strong></p><ol><li>切换到目标分支： git checkout feat&#x2F;1.1.0 </li><li>应用修复： git cherry-pick 09f76ee4a</li><li>应用成功之后直接 git push</li></ol><blockquote></blockquote><ul><li>如果成功应用修复，会有类似如下信息:<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git cherry<span class="literal">-pick</span> <span class="number">09</span>f7ee67e</span><br><span class="line">[<span class="type">feat</span>/<span class="number">1.1</span><span class="type">.0</span>  <span class="number">87</span><span class="type">f15e9ef</span>] fix: xxxxxxxxx</span><br><span class="line">Date: Wed Sep <span class="number">4</span> <span class="number">12</span>:<span class="number">44</span>:<span class="number">49</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">10</span> insertions(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure></li><li>如果出现如下类似信息：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git cherry<span class="literal">-pick</span> <span class="number">49006</span>ed7a</span><br><span class="line">error: could not apply <span class="number">49006</span>ed7a... fix: xxxxxxxxxx</span><br><span class="line">hint: after resolving the conflicts, mark the corrected paths</span><br><span class="line">hint: with <span class="string">&#x27;git add &lt;paths&gt;&#x27;</span> or <span class="string">&#x27;git rm &lt;paths&gt;&#x27;</span></span><br><span class="line">hint: and commit the result with <span class="string">&#x27;git commit&#x27;</span></span><br></pre></td></tr></table></figure>说明出现冲突，需要手动修复（具体流程与 git merge 冲突解决相同）。解决冲突之后，使用 git add  和 git commit  命令手动进行提交。</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote></blockquote><ul><li>如果要放弃本地 cherry-pick 恢复到命令执行之前的状态，使用命令 git cherry-pick –abort</li><li>如果有多个提交，并且中间过程出现冲突，解决冲突之后，使用 git cherry-pick –continue  继续下一个提交</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-MR 冲突解决</title>
      <link href="/2021/04/14/git-05/"/>
      <url>/2021/04/14/git-05/</url>
      
        <content type="html"><![CDATA[<p>将代码合并到主分支的请求。当发起者发起 MR时，系统会自动将该分支或者仓库的代码和主分支的代码合并，如果发现冲突则需要进行解决。</p><p>示例：从 feat&#x2F;1.1.2 分支提 MR 到 feat&#x2F;1.1.1 分支</p><blockquote><blockquote></blockquote></blockquote><ol><li>切换到目标分支：git checkout feat&#x2F;1.1.1</li><li>更新代码：git pull</li><li>切换到源分支：git checkout feat&#x2F;1.1.2</li><li>运行merge命令查看冲突文件：git merge feat&#x2F;1.1.1</li><li>解决冲突：按住cmd，点击冲突文件可以跳到冲突代码处，选择更改或保留</li><li>添加更改文件：git add .</li><li>提交代码更改：git commit，这里不输入-m，可以自动保留分支的 merge信息</li><li>推送到远程分支：git push</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 回退到某个版本命名操作</title>
      <link href="/2021/03/24/git-04/"/>
      <url>/2021/03/24/git-04/</url>
      
        <content type="html"><![CDATA[<h4 id="第一步，查看提交的版本号"><a href="#第一步，查看提交的版本号" class="headerlink" title="第一步，查看提交的版本号"></a>第一步，查看提交的版本号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">//会出现如下信息：</span><br><span class="line">// commit 2c5d**********13778dfb95f (HEAD -&gt; feat/1.*.*, tag: publish/1.*.*, master)</span><br><span class="line">// Merge: 27c****c 9c****0</span><br><span class="line">// Author: ****</span><br><span class="line">// Date:   *** *** 14:15:45 ***</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第二步，回退到目标版本"><a href="#第二步，回退到目标版本" class="headerlink" title="第二步，回退到目标版本"></a>第二步，回退到目标版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号xxx</span><br><span class="line"></span><br><span class="line">// 版本号xxx 指的就是 commit 后面 2c5d**********13778dfb95f</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三步，提交代码"><a href="#第三步，提交代码" class="headerlink" title="第三步，提交代码"></a>第三步，提交代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f -u origin &lt;分支名xxx&gt;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>回退到某个commit后会将该commit之后的commit丢弃掉<br>如果后代码有用，最好在回退之前先将该分支备份。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 分支重命名操作</title>
      <link href="/2021/03/24/git-03/"/>
      <url>/2021/03/24/git-03/</url>
      
        <content type="html"><![CDATA[<h3 id="1、本地分支重命名"><a href="#1、本地分支重命名" class="headerlink" title="1、本地分支重命名"></a>1、本地分支重命名</h3><p>本地分支是指：你当前这个分支还没有推送到远程的情况，这种情况修改分支名称就要方便很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;旧分支名&gt; &lt;新分支名&gt;</span><br></pre></td></tr></table></figure><p>其中，-m 表示 move，即移动或重命名分支。例如，将 feature-1 分支重命名为 feature-new 分支，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m feature-1 feature-new</span><br></pre></td></tr></table></figure><h3 id="2、远程分支重命名"><a href="#2、远程分支重命名" class="headerlink" title="2、远程分支重命名"></a>2、远程分支重命名</h3><p>如果要在本地和远程同时重命名分支，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;旧分支名&gt; &lt;新分支名&gt;</span><br><span class="line">git push --set-upstream origin &lt;新分支名&gt;</span><br><span class="line">git push origin --delete &lt;旧分支名&gt;</span><br></pre></td></tr></table></figure><p>其中，<strong>git push –set-upstream origin &lt;新分支名&gt;</strong> 用于将本地新分支和远程新分支关联，<strong>git push origin –delete &lt;旧分支名&gt;</strong> 用于删除远程旧分支。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="https://link.zhihu.com/?target=https://opensource.com/article/22/4/git-branches">《用乐高来类比解释 Git 分支》</a>，作者：Seth Kenlon<br><a href="https://link.zhihu.com/?target=https://opensource.com/article/22/4/git-push">《我的 Git push 命令的安全使用指南》</a>，作者：Noaa Barki<br><a href="https://link.zhihu.com/?target=https://opensource.com/article/18/5/git-branching">《Git 分支指南》</a>，作者：Kedar Vijay Kulkarni</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 提交规范</title>
      <link href="/2021/03/11/git-02/"/>
      <url>/2021/03/11/git-02/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git 每次提交代码，应清晰明了的写明本次提交的目的。</span><br></pre></td></tr></table></figure><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用于说明git commit的类别，只允许使用下面的标识。</span><br><span class="line">● feat：新功能（feature）</span><br><span class="line">● fix：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG</span><br><span class="line">● docs：文档（documentation）</span><br><span class="line">● style：格式（不影响代码运行的变动）</span><br><span class="line">● refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">● perf：优化相关，比如提升性能、体验</span><br><span class="line">● test：增加测试</span><br><span class="line">● chore：构建过程或辅助工具的变动</span><br><span class="line">● revert：回滚到上一个版本</span><br><span class="line">● merge：代码合并</span><br><span class="line">● sync：同步主线或分支的Bug</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 基本常用命令</title>
      <link href="/2021/03/08/git-01/"/>
      <url>/2021/03/08/git-01/</url>
      
        <content type="html"><![CDATA[<ol><li>git add [file]：向暂存区添加文件或文件夹。</li><li>git commit -m “message”：提交暂存区的文件或文件夹到本地仓库并添加 commit message。</li><li>git status：查看当前工作区、暂存区、本地仓库的文件状态。</li><li>git log：查看本地仓库的提交日志。</li><li>git checkout [branch]：切换到指定分支或者 commit。</li><li>git branch：查看所有本地分支。</li><li>git branch [branch]：创建新的分支。</li><li>git merge [branch]：将指定分支合并到当前分支。</li><li>git push：将本地分支推送到远程分支。</li><li>git pull：从远程分支拉取到本地分支。</li><li>git clone [url]：克隆远程仓库到本地。</li><li>git remote add [name] [url]：添加远程仓库并命名。</li><li>git stash：将当前工作区的修改暂存起来。</li><li>git stash apply：恢复最近一次 stash 的修改。</li><li>git diff：查看工作区和暂存区、本地仓库之间的文件差异。</li><li>git reset [file]：取消暂存区的文件修改。</li><li>git rm [file]：将文件从版本控制中删除。</li><li>git tag [version]：给当前 commit 打上标签。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
